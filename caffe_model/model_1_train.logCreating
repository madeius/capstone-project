I1203 01:04:29.986824  9856 caffe.cpp:178] Use CPU.
NVIDIA: no NVIDIA devices found
modprobe: ERROR: could not insert 'nvidia_367_uvm': No such device
E1203 01:04:30.028703  9856 common.cpp:104] Cannot create Cublas handle. Cublas won't be available.
NVIDIA: no NVIDIA devices found
modprobe: ERROR: could not insert 'nvidia_367_uvm': No such device
E1203 01:04:30.068486  9856 common.cpp:111] Cannot create Curand generator. Curand won't be available.
I1203 01:04:30.068634  9856 solver.cpp:48] Initializing solver from parameters: 
test_iter: 1000
test_interval: 1000
base_lr: 0.001
display: 50
max_iter: 40000
lr_policy: "step"
gamma: 0.1
momentum: 0.9
weight_decay: 0.0005
stepsize: 2500
snapshot: 5000
snapshot_prefix: "/home/ubuntu/cats-dogs/caffe_model"
solver_mode: CPU
net: "/home/ubuntu/cats-dogs/caffe_model/caffenet_train_val_1.prototxt"
I1203 01:04:30.068748  9856 solver.cpp:91] Creating training net from net file: /home/ubuntu/cats-dogs/caffe_model/caffenet_train_val_1.prototxt
I1203 01:04:30.069375  9856 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer data
I1203 01:04:30.069396  9856 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I1203 01:04:30.069561  9856 net.cpp:49] Initializing net from parameters: 
name: "CaffeNet"
state {
  phase: TRAIN
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 227
    mean_file: "/home/ubuntu/cats-dogs/input/mean.binaryproto"
  }
  data_param {
    source: "/home/ubuntu/cats-dogs/input/train_lmdb"
    batch_size: 256
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
}
I1203 01:04:30.069686  9856 layer_factory.hpp:77] Creating layer data
NVIDIA: no NVIDIA devices found
modprobe: ERROR: could not insert 'nvidia_367_uvm': No such device
F1203 01:04:30.128150  9856 internal_thread.cpp:26] Check failed: error == cudaSuccess (30 vs. 0)  unknown error
*** Check failure stack trace: ***
    @     0x7f5898214daa  (unknown)
    @     0x7f5898214ce4  (unknown)
    @     0x7f58982146e6  (unknown)
    @     0x7f5898217687  (unknown)
    @     0x7f5898935162  caffe::InternalThread::StartInternalThread()
    @     0x7f58989362ee  caffe::DataReader::Body::Body()
    @     0x7f5898936548  caffe::DataReader::DataReader()
    @     0x7f58988b093b  caffe::DataLayer<>::DataLayer()
    @     0x7f58988b0982  caffe::Creator_DataLayer<>()
    @     0x7f58988d27f7  caffe::LayerRegistry<>::CreateLayer()
    @     0x7f5898972055  caffe::Net<>::Init()
    @     0x7f58989741c5  caffe::Net<>::Net()
    @     0x7f589892e3ba  caffe::Solver<>::InitTrainNet()
    @     0x7f589892f4cc  caffe::Solver<>::Init()
    @     0x7f589892f7fa  caffe::Solver<>::Solver()
    @     0x7f5898949e23  caffe::Creator_SGDSolver<>()
    @           0x40eb6e  caffe::SolverRegistry<>::CreateSolver()
    @           0x407dbb  train()
    @           0x405bfc  main
    @     0x7f5896eeef45  (unknown)
    @           0x4063cd  (unknown)
    @              (nil)  (unknown)
